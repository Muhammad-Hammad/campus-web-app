[{"D:\\Project\\campus-web-app\\src\\reportWebVitals.js":"1","D:\\Project\\campus-web-app\\src\\components\\app\\index.js":"2","D:\\Project\\campus-web-app\\src\\redux\\reducers\\auth.js":"3","D:\\Project\\campus-web-app\\src\\components\\signup\\index.js":"4","D:\\Project\\campus-web-app\\src\\components\\Root.js":"5","D:\\Project\\campus-web-app\\src\\firebase\\index.js":"6","D:\\Project\\campus-web-app\\src\\components\\ShowJobs\\JobCard.js":"7","D:\\Project\\campus-web-app\\src\\routes\\index.js":"8","D:\\Project\\campus-web-app\\src\\components\\signin\\index.js":"9","D:\\Project\\campus-web-app\\src\\redux\\actions\\index.js":"10","D:\\Project\\campus-web-app\\src\\components\\AddJob\\index.js":"11","D:\\Project\\campus-web-app\\src\\lib\\index.js":"12","D:\\Project\\campus-web-app\\src\\components\\forgotPassword\\index.js":"13","D:\\Project\\campus-web-app\\src\\components\\Error.js":"14","D:\\Project\\campus-web-app\\src\\components\\appbar\\index.js":"15","D:\\Project\\campus-web-app\\src\\components\\ShowJobs\\index.js":"16","D:\\Project\\campus-web-app\\src\\components\\dashboard\\index.js":"17","D:\\Project\\campus-web-app\\src\\components\\loader\\index.js":"18","D:\\Project\\campus-web-app\\src\\redux\\constants\\index.js":"19","D:\\Project\\campus-web-app\\src\\index.js":"20","D:\\Project\\campus-web-app\\src\\redux\\store\\index.js":"21","D:\\Project\\campus-web-app\\src\\redux\\reducers\\index.js":"22","D:\\Project\\campus-web-app\\src\\App.test.js":"23","D:\\Project\\campus-web-app\\src\\components\\studentJobs\\index.js":"24","D:\\Project\\campus-web-app\\src\\components\\test.js":"25","D:\\Project\\campus-web-app\\src\\components\\admin\\AdminTable.js":"26","D:\\Project\\campus-web-app\\src\\components\\admin\\index.js":"27"},{"size":362,"mtime":1610449489816,"results":"28","hashOfConfig":"29"},{"size":1464,"mtime":1613491864069,"results":"30","hashOfConfig":"29"},{"size":14386,"mtime":1613705142768,"results":"31","hashOfConfig":"29"},{"size":7577,"mtime":1613000520275,"results":"32","hashOfConfig":"29"},{"size":628,"mtime":1613690642209,"results":"33","hashOfConfig":"29"},{"size":449,"mtime":1612184943329,"results":"34","hashOfConfig":"29"},{"size":6642,"mtime":1613613939200,"results":"35","hashOfConfig":"29"},{"size":2593,"mtime":1613585740170,"results":"36","hashOfConfig":"29"},{"size":7315,"mtime":1613588736266,"results":"37","hashOfConfig":"29"},{"size":15212,"mtime":1613689154173,"results":"38","hashOfConfig":"29"},{"size":5593,"mtime":1613485061841,"results":"39","hashOfConfig":"29"},{"size":1090,"mtime":1612459424594,"results":"40","hashOfConfig":"29"},{"size":4882,"mtime":1613587991942,"results":"41","hashOfConfig":"29"},{"size":582,"mtime":1612198948608,"results":"42","hashOfConfig":"29"},{"size":9437,"mtime":1613616284139,"results":"43","hashOfConfig":"29"},{"size":7238,"mtime":1613614931662,"results":"44","hashOfConfig":"29"},{"size":2557,"mtime":1613690690955,"results":"45","hashOfConfig":"29"},{"size":512,"mtime":1613616805228,"results":"46","hashOfConfig":"29"},{"size":2763,"mtime":1613671712567,"results":"47","hashOfConfig":"29"},{"size":514,"mtime":1612035353724,"results":"48","hashOfConfig":"29"},{"size":407,"mtime":1612033288465,"results":"49","hashOfConfig":"29"},{"size":115,"mtime":1612033236096,"results":"50","hashOfConfig":"29"},{"size":2132,"mtime":1612360979149,"results":"51","hashOfConfig":"52"},{"size":3375,"mtime":1613407749670,"results":"53","hashOfConfig":"29"},{"size":11050,"mtime":1613708270044,"results":"54","hashOfConfig":"29"},{"size":24248,"mtime":1613678420495,"results":"55","hashOfConfig":"29"},{"size":1148,"mtime":1613692089762,"results":"56","hashOfConfig":"29"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"wu38f9",{"filePath":"60","messages":"61","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"59"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"59"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"59"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"59"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"59"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ul92yb",{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"59"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"59"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"59"},"D:\\Project\\campus-web-app\\src\\reportWebVitals.js",[],["126","127"],"D:\\Project\\campus-web-app\\src\\components\\app\\index.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { detectRole } from \"../../redux/actions\";\r\nimport { ROUTES, RouteWithSubRoutes, RenderRoutes } from \"../../routes\";\r\nimport Loader from \"../loader\";\r\nfunction App() {\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  let {\r\n    login,\r\n    signup,\r\n    user,\r\n    verify,\r\n    getData,\r\n    Jobs,\r\n    role,\r\n    userName,\r\n    drawer,\r\n  } = state;\r\n \r\n  let check = Object.keys(user).length === 0 && user.constructor === Object;\r\n  if (verify.verifying || login.loading) {\r\n    return <Loader size={300} />;\r\n  } else {\r\n    return <RenderRoutes routes={ROUTES} />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n// <Switch>\r\n//   {ROUTES.map((route, i) => {\r\n//     if (verify.verifying) {\r\n//       return <Loader size={100} />;\r\n//     } else {\r\n//       if (check) {\r\n//         if (!route.private) {\r\n//           // console.log({ route });\r\n//           return <RouteWithSubRoutes key={i} {...route} />;\r\n//         }\r\n//       } else if (!check) {\r\n//         console.log(\r\n//           route.key,\r\n//           <RouteWithSubRoutes key={route.key} {...route} />\r\n//         );\r\n//         // console.log(<RouteWithSubRoutes key={i} {...route} />);\r\n//         return <RouteWithSubRoutes key={route.key} {...route} />;\r\n//       }\r\n//     }\r\n//   })}\r\n// </Switch>\r\n","D:\\Project\\campus-web-app\\src\\redux\\reducers\\auth.js",[],"D:\\Project\\campus-web-app\\src\\components\\signup\\index.js",["142","143","144"],"import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { SignupSchema } from \"../../lib\";\r\nimport Loading from \"../loader\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\n// import Link from \"@material-ui/core/Link\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { signupUser } from \"../../redux/actions\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\n// const regex = /[^A-Za-z]/gi;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n    fontFamily: \"monospace\",\r\n  },\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  let initialValues = {\r\n    userName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    role: \"Student\",\r\n  };\r\n  const state = useSelector((state) => state.auth);\r\n  let { signup, login, userName } = state;\r\n  let str = userName?.replace(/\\s+/g, \"-\").toLowerCase();\r\n\r\n  const handleSubmit = (e, { resetForm }) => {\r\n    dispatch(signupUser(e.userName, e.email, e.password, e.role));\r\n    resetForm({\r\n      values: {\r\n        userName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        role: \"Student\",\r\n      },\r\n    });\r\n  };\r\n\r\n  if (signup.success || login.success) {\r\n    return <Redirect to={`/dashboard`} />;\r\n  } else {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={SignupSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, errors, handleChange, touched, isValid, dirty }) => (\r\n              <Form className={classes.form}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    error={\r\n                      Boolean(errors.userName) && Boolean(touched.userName)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    required\r\n                    value={values.userName}\r\n                    fullWidth\r\n                    id=\"userName\"\r\n                    label=\"UserName\"\r\n                    name=\"userName\"\r\n                    autoComplete=\"userName\"\r\n                    helperText={\r\n                      errors.userName && touched.userName\r\n                        ? errors.userName\r\n                        : null\r\n                    }\r\n                    onFocus={() => {\r\n                      signup.errorMsg = \"\";\r\n                      touched.userName = \"\";\r\n                    }}\r\n                    onChange={handleChange}\r\n                  />\r\n                </Grid>\r\n                <br />\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    error={Boolean(errors.email) && Boolean(touched.email)}\r\n                    variant=\"outlined\"\r\n                    required\r\n                    value={values.email}\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    helperText={\r\n                      errors.email && touched.email ? errors.email : null\r\n                    }\r\n                    onFocus={() => {\r\n                      signup.errorMsg = \"\";\r\n                      touched.email = \"\";\r\n                    }}\r\n                    onChange={handleChange}\r\n                  />\r\n                </Grid>\r\n                <br />\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    error={\r\n                      Boolean(errors.password) && Boolean(touched.password)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    value={values.password}\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    helperText={\r\n                      errors.password && touched.password\r\n                        ? errors.password\r\n                        : null\r\n                    }\r\n                    onFocus={() => {\r\n                      signup.errorMsg = \"\";\r\n                      touched.password = \"\";\r\n                    }}\r\n                    onChange={handleChange}\r\n                  />\r\n                </Grid>\r\n                {signup.error && (\r\n                  <Alert severity=\"error\">{signup.errorMsg}</Alert>\r\n                )}\r\n                <br />\r\n                <FormControl component=\"fieldset\">\r\n                  <FormLabel component=\"legend\">Role</FormLabel>\r\n                  <RadioGroup\r\n                    aria-label=\"role\"\r\n                    name=\"role\"\r\n                    required\r\n                    value={values.role}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"Student\"\r\n                      control={<Radio />}\r\n                      label=\"Student\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"Company\"\r\n                      control={<Radio />}\r\n                      label=\"Company\"\r\n                    />\r\n                  </RadioGroup>\r\n                </FormControl>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  disabled={!dirty}\r\n                >\r\n                  {!signup.loading ? \"Sign Up\" : <Loading size={24} />}\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link to=\"/\" variant=\"body2\">\r\n                      Already have an account? Sign in\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","D:\\Project\\campus-web-app\\src\\components\\Root.js",["145","146","147","148","149"],"import Firebase from \"firebase\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { firebaseConfig } from \"../firebase/index\";\nimport Store from \"../redux/store\";\nimport App from \"./app\";\nimport Appbar from \"./appbar\";\nimport Test from \"./test\";\nimport AdminTable from \"./admin/AdminTable\";\nimport AdminPanel from \"./admin\";\nimport Loader from \"./loader\";\n\nFirebase.initializeApp(firebaseConfig);\n\nconst store = Store();\nfunction Root() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <App/>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default Root;\n","D:\\Project\\campus-web-app\\src\\firebase\\index.js",[],"D:\\Project\\campus-web-app\\src\\components\\ShowJobs\\JobCard.js",["150","151","152","153"],"import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport { useState } from \"react\";\r\nimport { Modal } from \"@material-ui/core\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // minWidth: 275,\r\n    maxWidth: \"100%\",\r\n    minHeight: 300,\r\n    maxHeight: 300,\r\n    padding: 20,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n    padding: 5,\r\n  },\r\n  // pos: {\r\n  //   marginBottom: 12,\r\n  // },\r\n  word: {\r\n    wordBreak: \"break-word\",\r\n    overflow: \"auto\",\r\n    maxHeight: 350,\r\n  },\r\n  btn: {\r\n    color: \"white\",\r\n    backgroundColor: \"red\",\r\n  },\r\n  btnSuccess: {\r\n    color: \"white\",\r\n    backgroundColor: \"green\",\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: \"40%\",\r\n    margin: \"0 auto\",\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function JobCard({\r\n  title,\r\n  experience,\r\n  description,\r\n  handleApply,\r\n  handleDelete,\r\n  userName,\r\n}) {\r\n  const classes = useStyles();\r\n  const state = useSelector((state) => state.auth);\r\n  const { role } = state;\r\n  const T = title.toUpperCase();\r\n  const location = useLocation();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  // console.log(location);\r\n\r\n  return (\r\n    <Card className={`${classes.root}`}>\r\n      <CardContent>\r\n        {role === \"Student\" || role === \"Admin\" ? (\r\n          <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\r\n            Company: {userName}\r\n          </Typography>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\r\n          Title : {T}\r\n        </Typography>\r\n        <Typography variant=\"h6\" component=\"h6\" className={classes.title}>\r\n          experience : {experience}\r\n        </Typography>\r\n        <CardActions>\r\n          <Button size=\"small\" onClick={handleOpen} color=\"secondary\">\r\n            Show Details\r\n          </Button>\r\n        </CardActions>\r\n        <Modal\r\n          aria-labelledby=\"transition-modal-title\"\r\n          aria-describedby=\"transition-modal-description\"\r\n          className={classes.modal}\r\n          open={open}\r\n          onClose={handleClose}\r\n          closeAfterTransition\r\n          BackdropComponent={Backdrop}\r\n          BackdropProps={{\r\n            timeout: 500,\r\n          }}\r\n        >\r\n          <Fade in={open} className=\"border border-transparent focus:outline-none focus:border-transparent\">\r\n            <Card>\r\n              <CardContent>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  className={classes.title}\r\n                >\r\n                  {T}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  component=\"h6\"\r\n                  className={classes.title}\r\n                >\r\n                  Experience : {experience}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  component=\"h6\"\r\n                  className={classes.title}\r\n                >\r\n                  {\" \"}\r\n                  Description : {description}{\" \"}\r\n                </Typography>\r\n                {role === \"Student\" &&\r\n                location.pathname !== \"/dashboard/studentjob\" ? (\r\n                  <CardActions>\r\n                    <Button size=\"small\" onClick={handleApply} color=\"primary\">\r\n                      Apply here\r\n                    </Button>\r\n                  </CardActions>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n                {role === \"Student\" &&\r\n                location.pathname === \"/dashboard/studentjob\" ? (\r\n                  <CardActions>\r\n                    <Button\r\n                      size=\"small\"\r\n                      onClick={handleDelete}\r\n                      color=\"secondary\"\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                  </CardActions>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n                {role === \"Company\" &&\r\n                location.pathname === \"/dashboard/showjob\" ? (\r\n                  <CardActions>\r\n                    <Button\r\n                      size=\"small\"\r\n                      onClick={handleDelete}\r\n                      color=\"secondary\"\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                  </CardActions>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </Fade>\r\n        </Modal>\r\n        {role === \"Student\" && location.pathname !== \"/dashboard/studentjob\" ? (\r\n          <CardActions>\r\n            <Button size=\"small\" onClick={handleApply} color=\"primary\">\r\n              Apply here\r\n            </Button>\r\n          </CardActions>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        {role === \"Student\" && location.pathname === \"/dashboard/studentjob\" ? (\r\n          <CardActions>\r\n            <Button size=\"small\" onClick={handleDelete} color=\"secondary\">\r\n              Delete\r\n            </Button>\r\n          </CardActions>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        {role === \"Company\" && location.pathname === \"/dashboard/showjob\" ? (\r\n          <CardActions>\r\n            <Button size=\"small\" onClick={handleDelete} color=\"secondary\">\r\n              Delete\r\n            </Button>\r\n          </CardActions>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\Project\\campus-web-app\\src\\routes\\index.js",["154","155","156","157","158","159"],"import { Redirect, Route, Switch } from \"react-router\";\r\nimport Signin from \"../components/signin\";\r\nimport Signup from \"../components/signup\";\r\nimport ForgotPassword from \"../components/forgotPassword\";\r\nimport Dashboard from \"../components/dashboard\";\r\nimport AddJob from \"../components/AddJob\";\r\nimport ShowJob from \"../components/ShowJobs\";\r\nimport Appbar from \"../components/appbar\";\r\nimport Error from \"../components/Error\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Loader from \"../components/loader\";\r\nimport StudentJobs from \"../components/studentJobs\";\r\nexport const ROUTES = [\r\n  {\r\n    path: \"/\",\r\n    exact: true,\r\n    key: \"SIGNIN\",\r\n    private: false,\r\n    component: Signin,\r\n  },\r\n  {\r\n    path: \"/signup\",\r\n    exact: true,\r\n    key: \"SIGNUP\",\r\n    private: false,\r\n    component: Signup,\r\n  },\r\n  {\r\n    path: \"/forgotPassword\",\r\n    exact: true,\r\n    key: \"FORGOT_PASSWORD\",\r\n    private: false,\r\n    component: ForgotPassword,\r\n  },\r\n  {\r\n    path: \"/dashboard\",\r\n    exact: true,\r\n    key: \"DASHBOARD\",\r\n    private: true,\r\n    component: Dashboard,\r\n  },\r\n  {\r\n    path: \"/dashboard/addjob\",\r\n    exact: true,\r\n    key: \"ADDJOB\",\r\n    private: true,\r\n    component:\r\n      // verify auth function if false then return to login page\r\n\r\n      // <Appbar>\r\n      AddJob,\r\n    // </Appbar>\r\n  },\r\n  {\r\n    path: \"/dashboard/showjob\",\r\n    exact: true,\r\n    key: \"SHOWJOB\",\r\n    private: true,\r\n    component: ShowJob,\r\n    // verify auth function if false then return to login page\r\n  },\r\n  {\r\n    path: \"/dashboard/studentjob\",\r\n    exact: true,\r\n    key: \"STUDENTJOBS\",\r\n    private: true,\r\n    component: StudentJobs,\r\n    // verify auth function if false then return to login page\r\n  },\r\n  // {\r\n  //   path: \"*\",\r\n  //   exact: false,\r\n  //   key: \"*\",\r\n  //   private: false,\r\n  //   component: () => <Error />,\r\n  // },\r\n];\r\n\r\nexport function RouteWithSubRoutes(route) {\r\n  const state = useSelector((state) => state.auth);\r\n  const { verify, login, signup } = state;\r\n\r\n  return (\r\n    <Route\r\n      path={route.path}\r\n      render={(props) => <route.component {...props} routes={route.routes} />}\r\n    />\r\n  );\r\n}\r\nexport function RenderRoutes({ routes }) {\r\n  return (\r\n    <>\r\n      <Route\r\n        path={[\"/dashboard\", \"addjob\", \"showjob\"]}\r\n        render={(props) => <Appbar props={routes} />}\r\n      />\r\n      <Switch>\r\n        {routes.map((route, i) => {\r\n          return <RouteWithSubRoutes key={route.key} {...route} />;\r\n        })}\r\n        {/* <Route path=\"*\" component={() => <h1>Not Found!</h1>} /> */}\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n","D:\\Project\\campus-web-app\\src\\components\\signin\\index.js",["160","161","162","163","164"],"import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, useHistory, Link } from \"react-router-dom\";\r\nimport { loginUser } from \"../../redux/actions\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Loader from \"../loader\";\r\nimport { Form, Formik } from \"formik\";\r\n// import Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { SigninSchema } from \"../../lib\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"green\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\nfunction Signin() {\r\n  // let [newEmail, setEmail] = useState(\"\");\r\n  // let [newPassword, setPassword] = useState(\"\");\r\n  let initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n    role: \"Student\",\r\n  };\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    dispatch(loginUser(values.email, values.password, values.role));\r\n    resetForm({\r\n      values: {\r\n        email: \"\",\r\n        password: \"\",\r\n        role: values.role,\r\n      },\r\n    });\r\n  };\r\n\r\n  const { login, signup, userName, getData } = state;\r\n  const classes = useStyles();\r\n  if (login.success || signup.success) {\r\n    return <Redirect to={`/dashboard`} />;\r\n  } else {\r\n    // debugger;\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign In\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={SigninSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, errors, handleChange, touched, isValid, dirty }) => (\r\n              <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={Boolean(errors.email) && Boolean(touched.email)}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      value={values.email}\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      helperText={\r\n                        errors.email && touched.email ? errors.email : null\r\n                      }\r\n                      onFocus={() => {\r\n                        login.error = false;\r\n                        touched.email = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.password) && Boolean(touched.password)\r\n                      }\r\n                      variant=\"outlined\"\r\n                      value={values.password}\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      helperText={\r\n                        errors.password && touched.password\r\n                          ? errors.password\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        login.error = false;\r\n                        touched.password = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {login.error && !values.email && (\r\n                  // <Typography component=\"p\" className={classes.errorText}>\r\n                  //   {login.errorMsg}\r\n                  // </Typography>\r\n                  <Alert severity=\"error\">{login.errorMsg}</Alert>\r\n                )}\r\n                <br/>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormLabel component=\"legend\">Role</FormLabel>\r\n                  <RadioGroup\r\n                    aria-label=\"role\"\r\n                    name=\"role\"\r\n                    required\r\n                    value={values.role}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"Student\"\r\n                      control={<Radio />}\r\n                      label=\"Student\"\r\n                      defaultChecked\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"Company\"\r\n                      control={<Radio />}\r\n                      label=\"Company\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"Admin\"\r\n                      control={<Radio />}\r\n                      label=\"Admin\"\r\n                    />\r\n                  </RadioGroup>\r\n                </FormControl>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  disabled={!dirty}\r\n                >\r\n                  {!login.loading ? \"Sign in\" : <Loader size={24} />}\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item xs={5}>\r\n                    <Link to=\"/forgotPassword\" variant=\"body2\">\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Grid>\r\n                  <Grid item xs={7}>\r\n                    <Link to=\"/signup\" variant=\"body2\">\r\n                      Don't have an account? Sign Up!\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","D:\\Project\\campus-web-app\\src\\redux\\actions\\index.js",[],"D:\\Project\\campus-web-app\\src\\components\\AddJob\\index.js",["165","166","167","168","169","170"],"import { Formik, Form } from \"formik\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n// import Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport WorkIcon from \"@material-ui/icons/Work\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { AddJobSchema } from \"../../lib\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addJob } from \"../../redux/actions\";\r\nimport Loading from \"../loader\";\r\nimport { Redirect, Link, useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\nfunction AddJob() {\r\n  const classes = useStyles();\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  let initialValues = {\r\n    title: \"\",\r\n    experience: \"\",\r\n    description: \"\",\r\n  };\r\n  const { login, signup, userName, user,role } = state;\r\n  const handleSubmit = (e, { resetForm }) => {\r\n    dispatch(addJob(e.title, e.experience, e.description, user.uid, userName));\r\n    resetForm({\r\n      values: {\r\n        title: \"\",\r\n        experience: \"\",\r\n        description: \"\",\r\n      },\r\n    });\r\n    history.push(\"/dashboard\");\r\n  };\r\n  if (role === \"Admin\" || role === \"Student\"){\r\n   return <Redirect to=\"/dashboard\" />\r\n  }\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <WorkIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Add Job\r\n        </Typography>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={AddJobSchema}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {({ values, errors, handleChange, touched, isValid, dirty }) => (\r\n            <Form className={classes.form}>\r\n              <TextField\r\n                error={Boolean(errors.title) && Boolean(touched.title)}\r\n                variant=\"outlined\"\r\n                value={values.title}\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                id=\"title\"\r\n                autoComplete=\"title\"\r\n                helperText={errors.title && touched.title ? errors.title : null}\r\n                onFocus={() => {\r\n                  // signup.errorMsg = \"\";\r\n                  touched.title = \"\";\r\n                }}\r\n                onChange={handleChange}\r\n              />\r\n              <TextField\r\n                error={\r\n                  Boolean(errors.experience) && Boolean(touched.experience)\r\n                }\r\n                value={values.experience}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"experience\"\r\n                label=\"Experience\"\r\n                id=\"experience\"\r\n                autoComplete=\"experience\"\r\n                helperText={\r\n                  errors.experience && touched.experience\r\n                    ? errors.experience\r\n                    : null\r\n                }\r\n                onFocus={() => {\r\n                  // signup.errorMsg = \"\";\r\n                  touched.experience = \"\";\r\n                }}\r\n                onChange={handleChange}\r\n              />\r\n              <TextField\r\n                error={\r\n                  Boolean(errors.description) && Boolean(touched.description)\r\n                }\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                value={values.description}\r\n                required\r\n                fullWidth\r\n                name=\"description\"\r\n                label=\"Description\"\r\n                multiline\r\n                row={4}\r\n                id=\"description\"\r\n                autoComplete=\"description\"\r\n                helperText={\r\n                  errors.description && touched.description\r\n                    ? errors.description\r\n                    : null\r\n                }\r\n                onFocus={() => {\r\n                  // signup.errorMsg = \"\";\r\n                  touched.description = \"\";\r\n                }}\r\n                onChange={handleChange}\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Grid container>\r\n                <Grid item>\r\n                  <Link to=\"/dashboard\">Back</Link>\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default AddJob;\r\n","D:\\Project\\campus-web-app\\src\\lib\\index.js",[],"D:\\Project\\campus-web-app\\src\\components\\forgotPassword\\index.js",[],"D:\\Project\\campus-web-app\\src\\components\\Error.js",[],"D:\\Project\\campus-web-app\\src\\components\\appbar\\index.js",["171","172","173","174","175"],"import React, { useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport { logoutUser, openingDrawer } from \"../../redux/actions\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport SchoolIcon from \"@material-ui/icons/School\";\r\nimport { validateYupSchema } from \"formik\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    paddingLeft: 0,\r\n    paddingRight: 0,  \r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: \"hidden\",\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(7) + 1,\r\n    },\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      width: theme.spacing(0),\r\n    }\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  shiftTextLeft: {\r\n    marginLeft: \"0px\",\r\n  },\r\n  shiftTextRight: {\r\n    marginLeft: drawerWidth,\r\n  },\r\n}));\r\n\r\nexport default function Appbar({ props }) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state.auth);\r\n  const { logout, user, userName, role } = state;\r\n  let history = useHistory();\r\n  const handleLogout = () => {\r\n    dispatch(logoutUser());\r\n  };\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n    dispatch(openingDrawer(true));\r\n  };\r\n const appRoutes = [{\r\n   title: \"Dashboard\",\r\n   path: \"/dashboard\",\r\n },\r\n {\r\n  title: \"Add Job\",\r\n  path: \"/dashboard/addjob\",\r\n },\r\n {\r\n  title: \"Show Job\",\r\n  path: \"/dashboard/showjob\",\r\n },\r\n {\r\n  title: \"Student Job\",\r\n  path: \"/dashboard/studentjob\",\r\n }\r\n]\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n    dispatch(openingDrawer(false));\r\n  };\r\n  let check = Object.keys(user).length === 0 && user.constructor === Object;\r\n  useEffect(() => {\r\n    if(role === \"Admin\"){\r\n      dispatch(openingDrawer(false));\r\n    }\r\n  }, [user])\r\n  if (check) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        <AppBar\r\n          xs={12}\r\n          position=\"fixed\"\r\n          className={`${clsx(classes.appBar, {\r\n            [classes.appBarShift]: open,\r\n          })} bg-gray-500 bg-gradient-to-r from-red-500 box-border ...`}\r\n        >\r\n          <Toolbar>\r\n          {role !== \"Admin\" ?(\r\n            <>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              edge=\"start\"\r\n              className={clsx(classes.menuButton, {\r\n                [classes.hide]: open,\r\n              })}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n           \r\n            <Typography variant=\"h6\">\r\n              <Button color=\"inherit\" onClick={() => history.goBack()}>\r\n                <ArrowBackIcon />\r\n              </Button>\r\n            </Typography>\r\n            </>\r\n           ): null }\r\n            <Typography variant=\"h6\" noWrap className={classes.title}>\r\n              {userName ? userName : \"Dashboard\"}\r\n            </Typography>\r\n            <Button color=\"inherit\" onClick={handleLogout}>\r\n              Logout\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        {role !== \"Admin\" ?(\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          className={`${clsx(classes.drawer, {\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          })}`}\r\n          classes={{\r\n            paper: clsx({\r\n              [classes.drawerOpen]: open,\r\n              [classes.drawerClose]: !open,\r\n            }),\r\n          }}\r\n        >\r\n          <div className={classes.toolbar}>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              {theme.direction === \"rtl\" ? (\r\n                <ChevronRightIcon />\r\n              ) : (\r\n                <ChevronLeftIcon />\r\n              )}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <List >\r\n            \r\n            {appRoutes.map((val, index) => {\r\n              let {title,path} = val;\r\n              if(title === \"Add Job\" && role === \"Student\"){\r\n                return(null);\r\n              }\r\n              else if(title === \"Student Job\" && role === \"Company\"){\r\n           return (\r\n             null\r\n            )\r\n          }\r\n          else {\r\n            return (\r\n              <ListItem\r\n                button\r\n                key={title}\r\n                onClick={() => history.push(`${path}`)}\r\n                \r\n              >\r\n                {console.log(props)}\r\n                <ListItemIcon>\r\n                  {index % 2 === 0 ? <BusinessIcon /> : <SchoolIcon />}\r\n                </ListItemIcon>\r\n                <ListItemText primary={title} />\r\n              </ListItem>\r\n            )\r\n          }\r\n        })\r\n        }\r\n          </List>\r\n        </Drawer>\r\n        )\r\n  : (<div></div>)}\r\n        <main className={classes.content}></main>\r\n        {role === \"Admin\" ? (<div className={classes.toolbar} />) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { logoutUser } from \"../../redux/actions\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\n// import AppBar from \"@material-ui/core/AppBar\";\r\n// import Toolbar from \"@material-ui/core/Toolbar\";\r\n// import Typography from \"@material-ui/core/Typography\";\r\n// import Button from \"@material-ui/core/Button\";\r\n// import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n// import { Redirect, useHistory } from \"react-router-dom\";\r\n// import Loader from \"../loader\";\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   menuButton: {\r\n//     marginRight: theme.spacing(2),\r\n//   },\r\n//   title: {\r\n//     flexGrow: 1,\r\n//   },\r\n// }));\r\n\r\n// function Appbar(props) {\r\n//   const dispatch = useDispatch();\r\n//   const state = useSelector((state) => state.auth);\r\n//   const { logout, user } = state;\r\n//   let history = useHistory();\r\n//   const handleLogout = () => {\r\n//     dispatch(logoutUser());\r\n//   };\r\n\r\n//   let check = Object.keys(user).length === 0 && user.constructor === Object;\r\n//   const classes = useStyles();\r\n//   if (check) {\r\n//     return <Redirect to=\"/\" />;\r\n//   } else {\r\n//     return (\r\n//       <div className={classes.root}>\r\n//         <AppBar position=\"static\">\r\n//           <Toolbar>\r\n//             <Typography variant=\"h6\" className={classes.title}>\r\n//               <Button color=\"inherit\" onClick={() => history.goBack()}>\r\n//                 <ArrowBackIcon />\r\n//               </Button>\r\n//             </Typography>\r\n//             <Button color=\"inherit\" onClick={handleLogout}>\r\n//               Logout\r\n//             </Button>\r\n//           </Toolbar>\r\n//         </AppBar>\r\n//         <div>{props.children}</div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Appbar;\r\n","D:\\Project\\campus-web-app\\src\\components\\ShowJobs\\index.js",["176","177","178","179","180","181","182","183","184"],"import { useEffect, useState } from \"react\";\r\nimport JobCard from \"./JobCard\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteCompanyJob,\r\n  detectRole,\r\n  getCompanyJobs,\r\n  getStudentJobs,\r\n  receiveMyJobs,\r\n  studentJob,\r\n} from \"../../redux/actions\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport Firebase from \"firebase\";\r\nimport Loader from \"../loader\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nfunction ShowJobs() {\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  const { user, Jobs, role, userName, loading, MyJobs, drawer } = state;\r\n  let [jobKey, setKey] = useState([]);\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      paddingLeft: drawer ? \"250px\" : \"10%\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        paddingLeft: theme.spacing(9) + 1,\r\n      },\r\n      boxSizing: \"border-box\",\r\n      transition: \"0.3s ease\",\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    h2: {\r\n      margin: \"0.2em 0 0.2em 0\",\r\n      color: \"black\",\r\n\r\n      fontWeight: \"normal\",\r\n      fontFamily: \"Helvetica\",\r\n      textTransform: \"uppercase\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    if (role === \"Company\") {\r\n      dispatch(getCompanyJobs(user.uid));\r\n      Firebase.database()\r\n        .ref(`Users/${user.uid}/Jobs`)\r\n        .on(`value`, (snapshot) => {\r\n          const data = snapshot.val();\r\n          const newData = data ? Object.keys(data) : [];\r\n          setKey(newData);\r\n        });\r\n    } else if (role === \"Student\") {\r\n      dispatch(getStudentJobs());\r\n      Firebase.database()\r\n        .ref(`Users/${user.uid}/Jobs`)\r\n        .on(`value`, (snapshot) => {\r\n          const data = snapshot.val();\r\n          const newData = data ? Object.keys(data) : [];\r\n          setKey(newData);\r\n        });\r\n    }\r\n  }, [user]);\r\n  const handleApply = (key) => {\r\n    dispatch(studentJob(user.uid, key));\r\n  };\r\n  const handleDelete = (key) => {\r\n    dispatch(deleteCompanyJob(user.uid, key));\r\n  };\r\n  let _Jobs = Jobs ? Object.entries(Jobs) : [];\r\n  if (role == \"Admin\"){\r\n   return <Redirect to=\"/dashboard\" />\r\n  }\r\n  if (!role || MyJobs.loading) {\r\n    return <Loader size={150} />;\r\n  } else if (role === \"Student\") {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\">\r\n              <Typography variant=\"h2\" className={classes.h2}>\r\n                All Jobs\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={12} md={12} lg={12}>\r\n            <Grid container justify=\"center\" spacing={3} xs={12}>\r\n              {console.log(jobKey,_Jobs)}\r\n              {jobKey.length !== _Jobs.length ? (\r\n                _Jobs.map((val, ind) => {\r\n                  let { title, experience, description, userName } = val[1];\r\n                  let key = val[0];\r\n                  let flag = jobKey.includes(key);\r\n                 \r\n                  if (!flag) {\r\n                    return (\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={6}\r\n                        md={4}\r\n                        lg={3}\r\n                        alignContent=\"center\"\r\n                        alignItems=\"center\"\r\n                        justify=\"center\"\r\n                      >\r\n                        <JobCard\r\n                          key={key}\r\n                          title={title}\r\n                          experience={experience}\r\n                          description={description}\r\n                          handleApply={() => handleApply(key)}\r\n                          userName={userName}\r\n                        />\r\n                      </Grid>\r\n                    );\r\n                  }\r\n                })\r\n              ) : (\r\n                <div>\r\n                  <Grid container>\r\n                    <Grid item xs={12}>\r\n                      <Grid container justify=\"center\">\r\n                        <Typography variant=\"h4\" className={classes.h2}>\r\n                          You Dont have any Jobs\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  } else if (role === \"Company\") {\r\n    \r\n    return (\r\n      <div>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\">\r\n              <Typography variant=\"h2\" className={classes.h2}>\r\n                All Jobs\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\" spacing={3}>\r\n              {\r\n              (jobKey.length !== 0 || _Jobs.length !== 0) ? (\r\n                _Jobs.map((val, ind) => {\r\n                  let { title, experience, description } = val[1];\r\n                  let key = val[0];\r\n                  let flag = jobKey.includes(key);\r\n               \r\n                  if (flag) {\r\n                    return (\r\n                      <Grid\r\n                        item\r\n                        xs={3}\r\n                        alignContent=\"center\"\r\n                        alignItems=\"center\"\r\n                        justify=\"center\"\r\n                      >\r\n                        <JobCard\r\n                          key={key}\r\n                          title={title}\r\n                          experience={experience}\r\n                          description={description}\r\n                          handleApply={() => handleApply(key)}\r\n                          handleDelete={() => handleDelete(key)}\r\n                        />\r\n                      </Grid>\r\n                    );\r\n                  }\r\n                })\r\n              ) : (\r\n                <div>\r\n                  <Grid container>\r\n                    <Grid item xs={12}>\r\n                      <Grid container justify=\"center\">\r\n                        <Typography variant=\"h4\" className={classes.h2}>\r\n                          You Dont have any Jobs\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowJobs;\r\n// Firebase.database()\r\n// .ref(`Users/${user.uid}/Jobs`)\r\n// .on(`value`, (snapshot) => {\r\n//   let data2 = [];\r\n//   snapshot.forEach((childSnapshot) => {\r\n//     const data = childSnapshot.val();\r\n//     data2.push(data);\r\n//     // const newarr = Object.entries(data);\r\n//   });\r\n//   const intersection = data1.filter(element => data2.includes(element));\r\n//   dispatch(receiveMyJobs(intersection));\r\n// });\r\n","D:\\Project\\campus-web-app\\src\\components\\dashboard\\index.js",["185","186","187","188","189","190","191","192","193","194","195","196","197","198","199"],"import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAllUsers, logoutUser } from \"../../redux/actions\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { RenderRoutes } from \"../../routes\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Firebase from \"firebase\";\r\nimport { useHistory, useRouteMatch, Switch, Link } from \"react-router-dom\";\r\nimport { RouteWithSubRoutes } from \"../../routes\";\r\nimport { receiveMyJobs } from \"../../redux/actions\";\r\nimport Loader from \"../loader\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport AdminPanel from \"../admin\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\nfunction Dashboard({ routes }) {\r\n  const classes = useStyles();\r\n  let { path, url } = useRouteMatch();\r\n  const history = useHistory();\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const { role, userName, user } = state;\r\n\r\n  if (!role) {\r\n    return <Loader size={300} />;\r\n  } else if (role === \"Admin\") {\r\n    return <AdminPanel />;\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Link to=\"/dashboard/addjob\">addjob</Link>\r\n      <Link to=\"/dashboard/showjob\">showjob</Link> */}\r\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1}>\r\n          {role === \"Company\" ? (\r\n            <Box p={1}>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                onClick={() => history.push(`/dashboard/addjob`)}\r\n              >\r\n                Add Job\r\n              </Button>\r\n            </Box>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n          {role === \"Student\" ? (\r\n            <Box p={1}>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                onClick={() => history.push(`/dashboard/studentjob`)}\r\n              >\r\n                Student Jobs\r\n              </Button>\r\n            </Box>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n          <Box p={1}>\r\n            <Button\r\n              color=\"primary\"\r\n              variant=\"outlined\"\r\n              onClick={() => history.push(`/dashboard/showjob`)}\r\n            >\r\n              Show {role === \"Student\" ? \"All\" : role === \"Company\" ? \"My\" : \"\"}{\" \"}\r\n              Jobs\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","D:\\Project\\campus-web-app\\src\\components\\loader\\index.js",["200"],"import { useState } from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  //   border-color: red;\r\n`;\r\n\r\nfunction Loader(props) {\r\n  return (\r\n    <div className=\"flex items-center h-screen\">\r\n      <PuffLoader loading={props.loading} css={override} size={props.size} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","D:\\Project\\campus-web-app\\src\\redux\\constants\\index.js",[],"D:\\Project\\campus-web-app\\src\\index.js",[],"D:\\Project\\campus-web-app\\src\\redux\\store\\index.js",[],"D:\\Project\\campus-web-app\\src\\redux\\reducers\\index.js",[],"D:\\Project\\campus-web-app\\src\\App.test.js",[],"D:\\Project\\campus-web-app\\src\\components\\studentJobs\\index.js",["201","202","203"],"import { useEffect, useState } from \"react\";\r\nimport JobCard from \"../ShowJobs/JobCard\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteStudentJob,\r\n  receiveMyJobs,\r\n  studentJob,\r\n} from \"../../redux/actions\";\r\nimport { Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport Firebase from \"firebase\";\r\n\r\nfunction StudentJobs() {\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const { user, Jobs, role, drawer } = state;\r\n  let [jobKey, setKey] = useState([]);\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginLeft: drawer ? \"250px\" : \"82px\",\r\n      transition: \"0.3s ease\",\r\n    },\r\n    h2: {\r\n      margin: \"0.2em 0 0.2em 0\",\r\n      color: \"black\",\r\n      fontWeight: \"normal\",\r\n      fontFamily: \"Helvetica\",\r\n      textTransform: \"uppercase\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    Firebase.database()\r\n      .ref(`Jobs/`)\r\n      .on(`value`, (snapshot) => {\r\n        const data = snapshot.val();\r\n\r\n        dispatch(receiveMyJobs(data));\r\n      });\r\n    Firebase.database()\r\n      .ref(`Users/${user.uid}/Jobs`)\r\n      .on(`value`, (snapshot) => {\r\n        const data = snapshot.val();\r\n        const newData = data ? Object.keys(data) : [];\r\n        setKey(newData);\r\n        // console.log(\"data key\", newData);\r\n      });\r\n  }, [user]);\r\n  console.log(\"jobkey\", jobKey);\r\n  console.log(user.uid);\r\n  const handleApply = (key) => {\r\n    dispatch(studentJob(user.uid, key));\r\n  };\r\n  const handleDelete = (key) => {\r\n    dispatch(deleteStudentJob(user.uid, key));\r\n  };\r\n  let _Jobs = Jobs ? Object.entries(Jobs) : [];\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* {console.log(\"hello\")} */}\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <Grid container justify=\"center\">\r\n            <Typography variant=\"h2\" className={classes.h2}>\r\n              Applied Jobs\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n            {console.log(\"_Jobs.length\", _Jobs.length)}\r\n            {console.log(\"JobKey\", jobKey.length)}\r\n            {jobKey.length > 0 ? (\r\n              _Jobs.map((val, ind) => {\r\n                let { title, experience, description, userName } = val[1];\r\n\r\n                let key = val[0];\r\n                let flag = jobKey.includes(key);\r\n                console.log(\"flag\", flag);\r\n                if (flag) {\r\n                  return (\r\n                    <Grid item xs={3}>\r\n                      <JobCard\r\n                        key={key}\r\n                        title={title}\r\n                        experience={experience}\r\n                        description={description}\r\n                        handleApply={() => handleApply(key)}\r\n                        handleDelete={() => handleDelete(key)}\r\n                        userName={userName}\r\n                      />\r\n                    </Grid>\r\n                  );\r\n                }\r\n              })\r\n            ) : (\r\n              <div>\r\n                <h1>You don't have any Job</h1>\r\n              </div>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StudentJobs;\r\n","D:\\Project\\campus-web-app\\src\\components\\test.js",["204","205","206","207","208","209","210"],"D:\\Project\\campus-web-app\\src\\components\\admin\\AdminTable.js",["211","212","213","214","215","216","217","218","219"],"import React, { useEffect, useState } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  BlockUser,\r\n  getAllJobs,\r\n  getAllUsers,\r\n  verifiedUser,\r\n} from \"../../redux/actions\";\r\nimport Loader from \"../loader\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  TableContainer,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport { Modal } from \"@material-ui/core\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport JobCard from \"../ShowJobs/JobCard\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    ':focus': {\r\n      outline: \"none\",\r\n    outlineColor: \"-webkit-focus-ring-color\",\r\n    outlineStyle: \"none\",\r\n    outlineWidth: \"0px\",\r\n    }\r\n  },\r\n  fade:{\r\n    flexGrow: 1,\r\n    \r\n    ':focus': {\r\n      outline: \"none\",\r\n    outlineColor: \"-webkit-focus-ring-color\",\r\n    outlineStyle: \"none\",\r\n    outlineWidth: \"0px\",\r\n    }\r\n    // backgroundColor: \"orange\",\r\n  },\r\n  grid:{\r\n    ':focus': {\r\n      outline: \"none\",\r\n    outlineColor: \"-webkit-focus-ring-color\",\r\n    outlineStyle: \"none\",\r\n    outlineWidth: \"0px\",\r\n    }\r\n    // backgroundColor: \"green\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n}));\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\nconst useStyles2 = makeStyles({\r\n  root: {\r\n    marginLeft: \"inherit\",\r\n  },\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\nexport default function AdminTable() {\r\n  const classes = useStyles();\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const [filters,setFilters] = useState(\"All\")\r\n  const { AllUsers, user, GetAllUsers, AllJobs, AllStudent, AllCompany } = state;\r\n\r\n  \r\n  const handleBlock = (uid, blocked) => {\r\n    dispatch(BlockUser(uid, blocked));\r\n  };\r\n  const handleVerified = (uid, verified) => {\r\n    dispatch(verifiedUser(uid, verified));\r\n  };\r\n  const [newAllJobs] = AllJobs;\r\n  const ExistingJobs = newAllJobs ? Object.entries(newAllJobs) : [];\r\n  const [open, setOpen] = useState(false);\r\n  const [filteredJobs, setFjobs] = useState([]);\r\n\r\n  const handleOpen = (jobs) => {\r\n    setOpen(true);\r\n    let Fjobs = [];\r\n    ExistingJobs.filter((val, ind) => {\r\n      if (jobs.includes(val[0])) {\r\n        return Fjobs.push(val[1]);\r\n      }\r\n    });\r\n    setFjobs(Fjobs);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  let [ newAllUsers] = AllUsers ? AllUsers : [];\r\n  let [newAllStudent] = AllStudent ? AllStudent : [];\r\n  let [newAllCompany] = AllCompany ? AllCompany : [];\r\n  let [allData, setAllData] = useState(newAllUsers);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [emptyRows,setEmptyRows] = useState(0);\r\n\r\n  const pressF = (filterVal) =>{\r\n     if(filterVal === \"All\"){\r\n      setAllData(newAllUsers);\r\n      setEmptyRows(rowsPerPage -\r\n        Math.min(rowsPerPage, newAllUsers?.length - page * rowsPerPage - 1))\r\n      }\r\n      else if (filterVal === \"Student\"){\r\n        setAllData(newAllStudent);\r\n        setEmptyRows(rowsPerPage -\r\n          Math.min(rowsPerPage, newAllStudent?.length - page * rowsPerPage - 1))\r\n        }\r\n      else if (filterVal === \"Company\"){\r\n        setAllData(newAllCompany);\r\n        setEmptyRows(rowsPerPage -\r\n          Math.min(rowsPerPage, newAllCompany?.length - page * rowsPerPage - 1))\r\n      }\r\n  }\r\n  const emptyRowsForAll =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, newAllUsers?.length - page * rowsPerPage - 1);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  const handleFilter = (e) =>{\r\n    setFilters(e.target.value);\r\n    pressF(e.target.value);\r\n  }\r\n\r\n  if (GetAllUsers?.loading || !AllUsers) {\r\n    return <Loader />;\r\n  } else if (!GetAllUsers.loading) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className={`${classes.root} `}>\r\n        <FormControl className=\"w-2/5 md:w-1/12\">\r\n        <InputLabel id=\"demo-simple-select-label\">Filtered By</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={filters}\r\n          onChange={(e)=> handleFilter(e)}\r\n        >\r\n          <MenuItem value={`All`}>All</MenuItem>\r\n          <MenuItem value={`Student`}>Student</MenuItem>\r\n          <MenuItem value={`Company`}>Company</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n          {/* <Title>Recent Orders</Title> */}\r\n          <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n              <TableHead class={classes.tableHead}>\r\n                <TableRow>\r\n                  <TableCell style={{ minWidth: 270,fontWeight: \"bold \" }}>Email</TableCell>\r\n                  <TableCell style={{ minWidth: 160,fontWeight: \"bold \"  }}>Password</TableCell>\r\n                  <TableCell style={{ minWidth: 140,fontWeight: \"bold \"  }}>Role</TableCell>\r\n                  <TableCell style={{ minWidth: 140,fontWeight: \"bold \"  }}>UserName</TableCell>\r\n                  <TableCell style={{fontWeight: \"bold \" }}>Blocked</TableCell>\r\n                  <TableCell style={{ minWidth: 140, paddingLeft: \"26px\",fontWeight: \"bold \"  }}>\r\n                    Status\r\n                  </TableCell>\r\n                  <TableCell style={{ minWidth: 140,fontWeight: \"bold \"  }}>Verification</TableCell>\r\n                  <TableCell style={{ minWidth: 150,paddingLeft: \"30px\",fontWeight: \"bold \"  }}>Jobs</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {(rowsPerPage > 0\r\n                  ? allData?.slice(\r\n                      page * rowsPerPage,\r\n                      page * rowsPerPage + rowsPerPage\r\n                    )\r\n                  : allData\r\n                ).map((row) => {\r\n                  let {\r\n                    email,\r\n                    uid,\r\n                    password,\r\n                    userName,\r\n                    role,\r\n                    blocked,\r\n                    Jobs,\r\n                    verified,\r\n                  } = row[1];\r\n                  if (role !== \"Admin\") {\r\n                    // if(filters === role || filters === \"All\"){\r\n                    let isJob = Jobs ? Object.keys(Jobs) : [];\r\n\r\n                    return (\r\n                      <TableRow key={uid}>\r\n                        <TableCell style={{ minWidth: 270 }}>{email}</TableCell>\r\n                        <TableCell style={{ minWidth: 160 }}>\r\n                          {password}\r\n                        </TableCell>\r\n                        <TableCell style={{ minWidth: 140 }}>{role}</TableCell>\r\n                        <TableCell style={{ minWidth: 140 }}>\r\n                          {userName}\r\n                        </TableCell>\r\n                        <TableCell>{blocked.toString()}</TableCell>\r\n                        <TableCell style={{ minWidth: 140 }}>\r\n                          <Button\r\n                            color=\"secondary\"\r\n                            onClick={() => handleBlock(uid, blocked)}\r\n                          >\r\n                            {blocked ? \"Unblock\" : \"block\"}\r\n                          </Button>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Button\r\n                            color=\"secondary\"\r\n                            onClick={() => handleVerified(uid, verified)}\r\n                          >\r\n                            {verified.toString()}\r\n                          </Button>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Button onClick={() => handleOpen(isJob)}>\r\n                            Show\r\n                          </Button>\r\n                          <Modal\r\n                            aria-labelledby=\"transition-modal-title\"\r\n                            aria-describedby=\"transition-modal-description\"\r\n                            className={classes.modal}\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            closeAfterTransition\r\n                            BackdropComponent={Backdrop}\r\n                            BackdropProps={{\r\n                              timeout: 500,\r\n                            }}\r\n                          >\r\n                            <Fade in={open} >\r\n                              <div className={`${classes.fade} border border-transparent focus:outline-none focus:border-transparent ...`}>\r\n                                <Grid container spacing={3} item className=\"border border-transparent focus:outline-none focus:border-transparent  ...\"  >\r\n                                  \r\n                                  {/* <Grid item xs={10} sm={12} md={12} lg={12}  className=\" border border-transparent focus:outline-none focus:border-transparent bg-gradient-to-r from-green-400 to-blue-500 focus:from-pink-500 focus:to-yellow-500...\"> */}\r\n                                  {/* <h1 className={classes.modal}>Jobs</h1> */}\r\n                                    <Grid\r\n                                      container\r\n                                      justify=\"center\"\r\n                                      spacing={3}\r\n                                      className=\"border border-transparent focus:outline-none focus:border-transparent ...\"\r\n                                    > \r\n                                      {!!filteredJobs.length ? (\r\n                                        filteredJobs.map((val, ind) => {\r\n                                          let {\r\n                                            title,\r\n                                            experience,\r\n                                            description,\r\n                                            userName,\r\n                                            uid,\r\n                                          } = val;\r\n                                          return (\r\n                                            <Grid\r\n                                              item\r\n                                              xs={10}\r\n                                              sm={6}\r\n                                              md={4}\r\n                                              lg={3}\r\n                                              alignContent=\"center\"\r\n                                              alignItems=\"center\"\r\n                                              justify=\"center\"\r\n                                            >\r\n                                              <JobCard\r\n                                                key={uid}\r\n                                                title={title}\r\n                                                experience={experience}\r\n                                                description={description}\r\n                                                userName={userName}\r\n                                              />\r\n                                            </Grid>\r\n                                          );\r\n                                        })\r\n                                      ) : (\r\n                                        <Card>\r\n                                          <CardContent>\r\n                                            <Typography variant=\"h4\">Currently, There are no Jobs associated with this user</Typography>\r\n                                          </CardContent>\r\n                                        </Card>\r\n                                      )}\r\n                                    {/* </Grid> */}\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </div>\r\n                            </Fade>\r\n                          </Modal>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );}\r\n                  // }\r\n                })}\r\n                {emptyRows > 0 && (\r\n                  <TableRow style={{ height: 53 * emptyRows }}>\r\n                    <TableCell colSpan={6} />\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n              <TableFooter>\r\n                <TableRow>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10]}\r\n                    colSpan={3}\r\n                    count={newAllUsers?.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    SelectProps={{\r\n                      inputProps: { \"aria-label\": \"rows per page\" },\r\n                      native: true,\r\n                    }}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    ActionsComponent={TablePaginationActions}\r\n                  />\r\n                </TableRow>\r\n              </TableFooter>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// function preventDefault(event) {\r\n//   event.preventDefault();\r\n// }\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   seeMore: {\r\n//     marginTop: theme.spacing(3),\r\n//   },\r\n//   modal: {\r\n//     display: \"flex\",\r\n//     alignItems: \"center\",\r\n//     justifyContent: \"center\",\r\n//   },\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n\r\n//   paper: {\r\n//     backgroundColor: theme.palette.background.paper,\r\n//     border: \"2px solid #000\",\r\n//     boxShadow: theme.shadows[5],\r\n//     padding: theme.spacing(2, 4, 3),\r\n//   },\r\n// }));\r\n\r\n// export default function AdminTable() {\r\n//   const classes = useStyles();\r\n//   const state = useSelector((state) => state.auth);\r\n//   const dispatch = useDispatch();\r\n//   const { AllUsers, user, GetAllUsers, AllJobs } = state;\r\n\r\n//   const [newAllUsers] = AllUsers ? AllUsers : [];\r\n//   const handleBlock = (uid, blocked) => {\r\n//     dispatch(BlockUser(uid, blocked));\r\n//   };\r\n//   const handleVerified = (uid, verified) => {\r\n//     dispatch(verifiedUser(uid, verified));\r\n//   };\r\n//   // console.log(\"all\", AllJobs);\r\n//   const [newAllJobs] = AllJobs;\r\n//   // console.log(\"saari\", newAllJobs);\r\n//   const ExistingJobs = newAllJobs ? Object.entries(newAllJobs) : [];\r\n//   const [open, setOpen] = useState(false);\r\n//   const [filteredJobs, setFjobs] = useState([]);\r\n\r\n//   const handleOpen = (jobs) => {\r\n//     setOpen(true);\r\n//     let Fjobs = [];\r\n//     ExistingJobs.filter((val, ind) => {\r\n//       if (jobs.includes(val[0])) {\r\n//         return Fjobs.push(val[1]);\r\n//       }\r\n//     });\r\n//     setFjobs(Fjobs);\r\n//   };\r\n\r\n//   const handleClose = () => {\r\n//     setOpen(false);\r\n//   };\r\n\r\n//   if (GetAllUsers?.loading || !AllUsers) {\r\n//     return <Loader />;\r\n//   } else if (!GetAllUsers.loading) {\r\n//     return (\r\n//       <React.Fragment>\r\n//         {/* <Title>Recent Orders</Title> */}\r\n//         <Table size=\"small\">\r\n//           <TableHead>\r\n//             <TableRow>\r\n//               <TableCell>Email</TableCell>\r\n//               <TableCell>Password</TableCell>\r\n//               <TableCell>Role</TableCell>\r\n//               <TableCell>UserName</TableCell>\r\n//               <TableCell>Blocked</TableCell>\r\n//               <TableCell style={{ paddingLeft: \"3em\" }}>Status</TableCell>\r\n//               <TableCell style={{ paddingLeft: \"1em\" }}>Verification</TableCell>\r\n//               <TableCell style={{ paddingLeft: \"2em\" }}>Jobs</TableCell>\r\n//             </TableRow>\r\n//           </TableHead>\r\n//           <TableBody>\r\n//             {newAllUsers.map((row) => {\r\n\r\n//               let {\r\n//                 email,\r\n//                 uid,\r\n//                 password,\r\n//                 userName,\r\n//                 role,\r\n//                 blocked,\r\n//                 Jobs,\r\n//                 verified,\r\n//               } = row[1];\r\n//               if (role !== \"Admin\") {\r\n\r\n//                 let isJob = Jobs ? Object.keys(Jobs) : [];\r\n\r\n//                 return (\r\n//                   <TableRow key={uid}>\r\n//                     <TableCell>{email}</TableCell>\r\n//                     <TableCell>{password}</TableCell>\r\n//                     <TableCell>{role}</TableCell>\r\n//                     <TableCell>{userName}</TableCell>\r\n//                     <TableCell>{blocked.toString()}</TableCell>\r\n//                     <TableCell>\r\n//                       <Button\r\n//                         color=\"secondary\"\r\n//                         onClick={() => handleBlock(uid, blocked)}\r\n//                       >\r\n//                         {blocked ? (\r\n//                           \"Unblock\"\r\n//                         ) : (\r\n//                           <span\r\n//                             style={{\r\n//                               marginLeft: \"1em\",\r\n//                               marginRight: \"1em\",\r\n//                             }}\r\n//                           >\r\n//                             block\r\n//                           </span>\r\n//                         )}\r\n//                       </Button>\r\n//                     </TableCell>\r\n//                     <TableCell>\r\n//                       <Button\r\n//                         color=\"secondary\"\r\n//                         onClick={() => handleVerified(uid, verified)}\r\n//                       >\r\n//                         {verified.toString()}\r\n//                       </Button>\r\n//                     </TableCell>\r\n//                     <TableCell>\r\n//                       <Button onClick={() => handleOpen(isJob)}>Show</Button>\r\n//                       <Modal\r\n//                         aria-labelledby=\"transition-modal-title\"\r\n//                         aria-describedby=\"transition-modal-description\"\r\n//                         className={(classes.modal, classes.root)}\r\n//                         open={open}\r\n//                         onClose={handleClose}\r\n//                         closeAfterTransition\r\n//                         BackdropComponent={Backdrop}\r\n//                         BackdropProps={{\r\n//                           timeout: 500,\r\n//                         }}\r\n//                       >\r\n//                         <Fade in={open}>\r\n//                           <div>\r\n//                             <Grid container spacing={3}>\r\n//                               <Grid item xs={12} sm={12} md={12} lg={12}>\r\n//                                 <Grid container justify=\"center\" spacing={3}>\r\n//                                   {filteredJobs ? (\r\n//                                     filteredJobs.map((val, ind) => {\r\n//                                       let {\r\n//                                         title,\r\n//                                         experience,\r\n//                                         description,\r\n//                                         userName,\r\n//                                         uid,\r\n//                                       } = val;\r\n\r\n//                                       return (\r\n//                                         <Grid\r\n//                                           item\r\n//                                           xs={12}\r\n//                                           sm={6}\r\n//                                           md={4}\r\n//                                           lg={3}\r\n//                                           alignContent=\"center\"\r\n//                                           alignItems=\"center\"\r\n//                                           justify=\"center\"\r\n//                                         >\r\n//                                           <JobCard\r\n//                                             key={uid}\r\n//                                             title={title}\r\n//                                             experience={experience}\r\n//                                             description={description}\r\n//                                             userName={userName}\r\n//                                           />\r\n//                                         </Grid>\r\n//                                       );\r\n//                                     })\r\n//                                   ) : (\r\n//                                     <div>No jobs</div>\r\n//                                   )}\r\n//                                 </Grid>\r\n//                               </Grid>\r\n//                             </Grid>\r\n//                           </div>\r\n//                         </Fade>\r\n//                       </Modal>\r\n//                     </TableCell>\r\n//                   </TableRow>\r\n//                 );\r\n//               }\r\n//             })}\r\n//           </TableBody>\r\n//         </Table>\r\n//       </React.Fragment>\r\n//     );\r\n//   }\r\n// }\r\n","D:\\Project\\campus-web-app\\src\\components\\admin\\index.js",["220","221","222","223","224"],"import { makeStyles, Paper } from \"@material-ui/core\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { BlockUser, getAllCompany, getAllJobs, getAllStudent, getAllUsers } from \"../../redux/actions\";\r\nimport AdminTable from \"./AdminTable\";\r\nimport Test from \"../test\";\r\n\r\nfunction AdminPanel() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state.auth);\r\n  const { user, drawer } = state;\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: \"flex\",\r\n      marginLeft: drawer ? \"250px\" : \"0px\",\r\n      transition: \"0.3s ease\",\r\n    },\r\n\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      display: \"flex\",\r\n      overflow: \"auto\",\r\n      flexDirection: \"column\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    dispatch(getAllUsers());\r\n    dispatch(getAllJobs());\r\n  }, [user]);\r\n  return (\r\n    <div className={`${classes.root}`}>\r\n      <Paper className={`${classes.paper} container mx-auto`}>\r\n       <Test />\r\n        {/* <AdminTable /> */}\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminPanel;\r\n",{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":19},{"ruleId":"229","severity":1,"message":"233","line":3,"column":10,"nodeType":"231","messageId":"232","endLine":3,"endColumn":16},{"ruleId":"229","severity":1,"message":"234","line":3,"column":18,"nodeType":"231","messageId":"232","endLine":3,"endColumn":23},{"ruleId":"229","severity":1,"message":"235","line":3,"column":25,"nodeType":"231","messageId":"232","endLine":3,"endColumn":33},{"ruleId":"229","severity":1,"message":"236","line":4,"column":10,"nodeType":"231","messageId":"232","endLine":4,"endColumn":20},{"ruleId":"229","severity":1,"message":"237","line":5,"column":18,"nodeType":"231","messageId":"232","endLine":5,"endColumn":36},{"ruleId":"229","severity":1,"message":"238","line":9,"column":9,"nodeType":"231","messageId":"232","endLine":9,"endColumn":17},{"ruleId":"229","severity":1,"message":"239","line":12,"column":5,"nodeType":"231","messageId":"232","endLine":12,"endColumn":11},{"ruleId":"229","severity":1,"message":"240","line":15,"column":5,"nodeType":"231","messageId":"232","endLine":15,"endColumn":12},{"ruleId":"229","severity":1,"message":"241","line":16,"column":5,"nodeType":"231","messageId":"232","endLine":16,"endColumn":9},{"ruleId":"229","severity":1,"message":"242","line":17,"column":5,"nodeType":"231","messageId":"232","endLine":17,"endColumn":9},{"ruleId":"229","severity":1,"message":"243","line":18,"column":5,"nodeType":"231","messageId":"232","endLine":18,"endColumn":13},{"ruleId":"229","severity":1,"message":"244","line":19,"column":5,"nodeType":"231","messageId":"232","endLine":19,"endColumn":11},{"ruleId":"229","severity":1,"message":"245","line":22,"column":7,"nodeType":"231","messageId":"232","endLine":22,"endColumn":12},{"ruleId":"229","severity":1,"message":"246","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":18},{"ruleId":"229","severity":1,"message":"247","line":9,"column":13,"nodeType":"231","messageId":"232","endLine":9,"endColumn":16},{"ruleId":"229","severity":1,"message":"248","line":67,"column":7,"nodeType":"231","messageId":"232","endLine":67,"endColumn":10},{"ruleId":"229","severity":1,"message":"249","line":7,"column":8,"nodeType":"231","messageId":"232","endLine":7,"endColumn":14},{"ruleId":"229","severity":1,"message":"250","line":8,"column":8,"nodeType":"231","messageId":"232","endLine":8,"endColumn":12},{"ruleId":"229","severity":1,"message":"251","line":9,"column":8,"nodeType":"231","messageId":"232","endLine":9,"endColumn":18},{"ruleId":"229","severity":1,"message":"252","line":10,"column":8,"nodeType":"231","messageId":"232","endLine":10,"endColumn":18},{"ruleId":"229","severity":1,"message":"253","line":11,"column":8,"nodeType":"231","messageId":"232","endLine":11,"endColumn":14},{"ruleId":"229","severity":1,"message":"254","line":9,"column":8,"nodeType":"231","messageId":"232","endLine":9,"endColumn":17},{"ruleId":"229","severity":1,"message":"255","line":10,"column":8,"nodeType":"231","messageId":"232","endLine":10,"endColumn":24},{"ruleId":"229","severity":1,"message":"256","line":11,"column":8,"nodeType":"231","messageId":"232","endLine":11,"endColumn":24},{"ruleId":"229","severity":1,"message":"257","line":12,"column":8,"nodeType":"231","messageId":"232","endLine":12,"endColumn":22},{"ruleId":"229","severity":1,"message":"235","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":18},{"ruleId":"229","severity":1,"message":"258","line":9,"column":8,"nodeType":"231","messageId":"232","endLine":9,"endColumn":13},{"ruleId":"229","severity":1,"message":"253","line":11,"column":8,"nodeType":"231","messageId":"232","endLine":11,"endColumn":14},{"ruleId":"229","severity":1,"message":"259","line":81,"column":11,"nodeType":"231","messageId":"232","endLine":81,"endColumn":17},{"ruleId":"229","severity":1,"message":"260","line":81,"column":19,"nodeType":"231","messageId":"232","endLine":81,"endColumn":24},{"ruleId":"229","severity":1,"message":"239","line":81,"column":26,"nodeType":"231","messageId":"232","endLine":81,"endColumn":32},{"ruleId":"229","severity":1,"message":"246","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":18},{"ruleId":"229","severity":1,"message":"261","line":21,"column":8,"nodeType":"231","messageId":"232","endLine":21,"endColumn":13},{"ruleId":"229","severity":1,"message":"262","line":59,"column":9,"nodeType":"231","messageId":"232","endLine":59,"endColumn":16},{"ruleId":"229","severity":1,"message":"243","line":71,"column":26,"nodeType":"231","messageId":"232","endLine":71,"endColumn":34},{"ruleId":"229","severity":1,"message":"240","line":71,"column":36,"nodeType":"231","messageId":"232","endLine":71,"endColumn":43},{"ruleId":"229","severity":1,"message":"263","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":24},{"ruleId":"229","severity":1,"message":"264","line":7,"column":8,"nodeType":"231","messageId":"232","endLine":7,"endColumn":16},{"ruleId":"229","severity":1,"message":"265","line":10,"column":8,"nodeType":"231","messageId":"232","endLine":10,"endColumn":11},{"ruleId":"229","severity":1,"message":"266","line":18,"column":8,"nodeType":"231","messageId":"232","endLine":18,"endColumn":15},{"ruleId":"229","severity":1,"message":"260","line":50,"column":11,"nodeType":"231","messageId":"232","endLine":50,"endColumn":16},{"ruleId":"229","severity":1,"message":"239","line":50,"column":18,"nodeType":"231","messageId":"232","endLine":50,"endColumn":24},{"ruleId":"229","severity":1,"message":"267","line":20,"column":8,"nodeType":"231","messageId":"232","endLine":20,"endColumn":17},{"ruleId":"229","severity":1,"message":"268","line":21,"column":8,"nodeType":"231","messageId":"232","endLine":21,"endColumn":16},{"ruleId":"229","severity":1,"message":"269","line":27,"column":10,"nodeType":"231","messageId":"232","endLine":27,"endColumn":27},{"ruleId":"229","severity":1,"message":"270","line":114,"column":11,"nodeType":"231","messageId":"232","endLine":114,"endColumn":17},{"ruleId":"271","severity":1,"message":"272","line":149,"column":6,"nodeType":"273","endLine":149,"endColumn":12,"suggestions":"274"},{"ruleId":"229","severity":1,"message":"236","line":7,"column":3,"nodeType":"231","messageId":"232","endLine":7,"endColumn":13},{"ruleId":"229","severity":1,"message":"275","line":10,"column":3,"nodeType":"231","messageId":"232","endLine":10,"endColumn":16},{"ruleId":"229","severity":1,"message":"265","line":14,"column":10,"nodeType":"231","messageId":"232","endLine":14,"endColumn":13},{"ruleId":"229","severity":1,"message":"243","line":23,"column":29,"nodeType":"231","messageId":"232","endLine":23,"endColumn":37},{"ruleId":"229","severity":1,"message":"276","line":23,"column":39,"nodeType":"231","messageId":"232","endLine":23,"endColumn":46},{"ruleId":"271","severity":1,"message":"272","line":71,"column":6,"nodeType":"273","endLine":71,"endColumn":12,"suggestions":"277"},{"ruleId":"278","severity":1,"message":"279","line":79,"column":12,"nodeType":"280","messageId":"281","endLine":79,"endColumn":14},{"ruleId":"282","severity":1,"message":"283","line":101,"column":38,"nodeType":"284","messageId":"285","endLine":101,"endColumn":40},{"ruleId":"282","severity":1,"message":"283","line":166,"column":38,"nodeType":"284","messageId":"285","endLine":166,"endColumn":40},{"ruleId":"229","severity":1,"message":"230","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":19},{"ruleId":"229","severity":1,"message":"286","line":3,"column":10,"nodeType":"231","messageId":"232","endLine":3,"endColumn":21},{"ruleId":"229","severity":1,"message":"287","line":3,"column":23,"nodeType":"231","messageId":"232","endLine":3,"endColumn":33},{"ruleId":"229","severity":1,"message":"288","line":5,"column":10,"nodeType":"231","messageId":"232","endLine":5,"endColumn":22},{"ruleId":"229","severity":1,"message":"289","line":7,"column":8,"nodeType":"231","messageId":"232","endLine":7,"endColumn":16},{"ruleId":"229","severity":1,"message":"233","line":8,"column":37,"nodeType":"231","messageId":"232","endLine":8,"endColumn":43},{"ruleId":"229","severity":1,"message":"290","line":8,"column":45,"nodeType":"231","messageId":"232","endLine":8,"endColumn":49},{"ruleId":"229","severity":1,"message":"237","line":9,"column":10,"nodeType":"231","messageId":"232","endLine":9,"endColumn":28},{"ruleId":"229","severity":1,"message":"275","line":10,"column":10,"nodeType":"231","messageId":"232","endLine":10,"endColumn":23},{"ruleId":"229","severity":1,"message":"291","line":26,"column":9,"nodeType":"231","messageId":"232","endLine":26,"endColumn":16},{"ruleId":"229","severity":1,"message":"292","line":27,"column":9,"nodeType":"231","messageId":"232","endLine":27,"endColumn":13},{"ruleId":"229","severity":1,"message":"293","line":27,"column":15,"nodeType":"231","messageId":"232","endLine":27,"endColumn":18},{"ruleId":"229","severity":1,"message":"238","line":30,"column":9,"nodeType":"231","messageId":"232","endLine":30,"endColumn":17},{"ruleId":"229","severity":1,"message":"243","line":31,"column":17,"nodeType":"231","messageId":"232","endLine":31,"endColumn":25},{"ruleId":"229","severity":1,"message":"294","line":31,"column":27,"nodeType":"231","messageId":"232","endLine":31,"endColumn":31},{"ruleId":"229","severity":1,"message":"246","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":18},{"ruleId":"229","severity":1,"message":"242","line":15,"column":23,"nodeType":"231","messageId":"232","endLine":15,"endColumn":27},{"ruleId":"271","severity":1,"message":"295","line":49,"column":6,"nodeType":"273","endLine":49,"endColumn":12,"suggestions":"296"},{"ruleId":"282","severity":1,"message":"283","line":77,"column":36,"nodeType":"284","messageId":"285","endLine":77,"endColumn":38},{"ruleId":"229","severity":1,"message":"297","line":4,"column":10,"nodeType":"231","messageId":"232","endLine":4,"endColumn":21},{"ruleId":"229","severity":1,"message":"230","line":6,"column":10,"nodeType":"231","messageId":"232","endLine":6,"endColumn":19},{"ruleId":"229","severity":1,"message":"298","line":8,"column":21,"nodeType":"231","messageId":"232","endLine":8,"endColumn":34},{"ruleId":"229","severity":1,"message":"299","line":8,"column":36,"nodeType":"231","messageId":"232","endLine":8,"endColumn":46},{"ruleId":"229","severity":1,"message":"300","line":8,"column":48,"nodeType":"231","messageId":"232","endLine":8,"endColumn":61},{"ruleId":"229","severity":1,"message":"301","line":127,"column":9,"nodeType":"231","messageId":"232","endLine":127,"endColumn":13},{"ruleId":"282","severity":1,"message":"302","line":143,"column":36,"nodeType":"284","messageId":"285","endLine":143,"endColumn":38},{"ruleId":"229","severity":1,"message":"230","line":1,"column":17,"nodeType":"231","messageId":"232","endLine":1,"endColumn":26},{"ruleId":"229","severity":1,"message":"290","line":2,"column":8,"nodeType":"231","messageId":"232","endLine":2,"endColumn":12},{"ruleId":"229","severity":1,"message":"299","line":21,"column":3,"nodeType":"231","messageId":"232","endLine":21,"endColumn":13},{"ruleId":"229","severity":1,"message":"286","line":22,"column":3,"nodeType":"231","messageId":"232","endLine":22,"endColumn":14},{"ruleId":"229","severity":1,"message":"303","line":170,"column":7,"nodeType":"231","messageId":"232","endLine":170,"endColumn":17},{"ruleId":"229","severity":1,"message":"294","line":183,"column":21,"nodeType":"231","messageId":"232","endLine":183,"endColumn":25},{"ruleId":"282","severity":1,"message":"302","line":200,"column":36,"nodeType":"284","messageId":"285","endLine":200,"endColumn":38},{"ruleId":"229","severity":1,"message":"304","line":237,"column":9,"nodeType":"231","messageId":"232","endLine":237,"endColumn":24},{"ruleId":"282","severity":1,"message":"283","line":297,"column":29,"nodeType":"284","messageId":"285","endLine":297,"endColumn":31},{"ruleId":"229","severity":1,"message":"305","line":4,"column":10,"nodeType":"231","messageId":"232","endLine":4,"endColumn":19},{"ruleId":"229","severity":1,"message":"298","line":4,"column":21,"nodeType":"231","messageId":"232","endLine":4,"endColumn":34},{"ruleId":"229","severity":1,"message":"300","line":4,"column":48,"nodeType":"231","messageId":"232","endLine":4,"endColumn":61},{"ruleId":"229","severity":1,"message":"251","line":5,"column":8,"nodeType":"231","messageId":"232","endLine":5,"endColumn":18},{"ruleId":"271","severity":1,"message":"295","line":30,"column":6,"nodeType":"273","endLine":30,"endColumn":12,"suggestions":"306"},"no-native-reassign",["307"],"no-negated-in-lhs",["308"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'detectRole' is defined but never used.","'RouteWithSubRoutes' is defined but never used.","'dispatch' is assigned a value but never used.","'signup' is assigned a value but never used.","'getData' is assigned a value but never used.","'Jobs' is assigned a value but never used.","'role' is assigned a value but never used.","'userName' is assigned a value but never used.","'drawer' is assigned a value but never used.","'check' is assigned a value but never used.","'useState' is defined but never used.","'yup' is defined but never used.","'str' is assigned a value but never used.","'Appbar' is defined but never used.","'Test' is defined but never used.","'AdminTable' is defined but never used.","'AdminPanel' is defined but never used.","'Loader' is defined but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'Error' is defined but never used.","'verify' is assigned a value but never used.","'login' is assigned a value but never used.","'Paper' is defined but never used.","'history' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'Loading' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'validateYupSchema' is defined but never used.","'logout' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'role'. Either include them or remove the dependency array.","ArrayExpression",["309"],"'receiveMyJobs' is defined but never used.","'loading' is assigned a value but never used.",["310"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'getAllUsers' is defined but never used.","'logoutUser' is defined but never used.","'RenderRoutes' is defined but never used.","'Firebase' is defined but never used.","'Link' is defined but never used.","'classes' is assigned a value but never used.","'path' is assigned a value but never used.","'url' is assigned a value but never used.","'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["311"],"'useDemoData' is defined but never used.","'getAllCompany' is defined but never used.","'getAllJobs' is defined but never used.","'getAllStudent' is defined but never used.","'rows' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'useStyles2' is assigned a value but never used.","'emptyRowsForAll' is assigned a value but never used.","'BlockUser' is defined but never used.",["312"],"no-global-assign","no-unsafe-negation",{"desc":"313","fix":"314"},{"desc":"313","fix":"315"},{"desc":"316","fix":"317"},{"desc":"316","fix":"318"},"Update the dependencies array to be: [dispatch, role, user]",{"range":"319","text":"320"},{"range":"321","text":"320"},"Update the dependencies array to be: [dispatch, user]",{"range":"322","text":"323"},{"range":"324","text":"323"},[4394,4400],"[dispatch, role, user]",[2055,2061],[1400,1406],"[dispatch, user]",[905,911]]